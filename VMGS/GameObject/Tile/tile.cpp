//=============================================================================
// ■ tile.cpp
//-----------------------------------------------------------------------------
//   3D模型：Tile
//=============================================================================

#include "../../VMGS.hpp"

namespace VM76 {
	bool Tiles::is_transperant(int tid) {
		return Air == tid || Glass == tid;
	}

	bool Tiles::is_opaque(int tid) {
		return !(Air == tid || Glass == tid);
	}

	bool Tiles::is_valid(int tid) {
		return tid != Air;
	}

	SimpleCubeTile::SimpleCubeTile(int tid) {
		int x = tid % 16;
		int y = tid / 16;
		float T = 1.0f / 16.0f;
		float S = 0.0f;
		float xs = x * T;
		float ys = y * T;
		vtx[0] = new Vertex[4] {
			{{0.0, 0.0, 0.0},{1.0, 1.0, 1.0, 1.0},{xs + S, ys + T},{0.0, 0.0, -1.0}},
			{{0.0, 1.0, 0.0},{1.0, 1.0, 1.0, 1.0},{xs + S, ys + S},{0.0, 0.0, -1.0}},
			{{1.0, 1.0, 0.0},{1.0, 1.0, 1.0, 1.0},{xs + T, ys + S},{0.0, 0.0, -1.0}},
			{{1.0, 0.0, 0.0},{1.0, 1.0, 1.0, 1.0},{xs + T, ys + T},{0.0, 0.0, -1.0}},
		};
		vtx[1] = new Vertex[4] {
			{{0.0, 0.0, 1.0},{1.0, 1.0, 1.0, 1.0},{xs + S, ys + T},{0.0, 0.0, 1.0}},
			{{0.0, 1.0, 1.0},{1.0, 1.0, 1.0, 1.0},{xs + S, ys + S},{0.0, 0.0, 1.0}},
			{{1.0, 1.0, 1.0},{1.0, 1.0, 1.0, 1.0},{xs + T, ys + S},{0.0, 0.0, 1.0}},
			{{1.0, 0.0, 1.0},{1.0, 1.0, 1.0, 1.0},{xs + T, ys + T},{0.0, 0.0, 1.0}},
		};
		vtx[2] = new Vertex[4] {
			{{0.0, 1.0, 0.0},{1.0, 1.0, 1.0, 1.0},{xs + S, ys + S},{0.0, 1.0, 0.0}},
			{{0.0, 1.0, 1.0},{1.0, 1.0, 1.0, 1.0},{xs + S, ys + T},{0.0, 1.0, 0.0}},
			{{1.0, 1.0, 1.0},{1.0, 1.0, 1.0, 1.0},{xs + T, ys + T},{0.0, 1.0, 0.0}},
			{{1.0, 1.0, 0.0},{1.0, 1.0, 1.0, 1.0},{xs + T, ys + S},{0.0, 1.0, 0.0}},
		};
		vtx[3] = new Vertex[4] {
			{{0.0, 0.0, 0.0},{1.0, 1.0, 1.0, 1.0},{xs + S, ys + T},{0.0, -1.0, 0.0}},
			{{0.0, 0.0, 1.0},{1.0, 1.0, 1.0, 1.0},{xs + T, ys + T},{0.0, -1.0, 0.0}},
			{{1.0, 0.0, 1.0},{1.0, 1.0, 1.0, 1.0},{xs + T, ys + S},{0.0, -1.0, 0.0}},
			{{1.0, 0.0, 0.0},{1.0, 1.0, 1.0, 1.0},{xs + S, ys + S},{0.0, -1.0, 0.0}},
		};
		vtx[4] = new Vertex[4] {
			{{0.0, 0.0, 0.0},{1.0, 1.0, 1.0, 1.0},{xs + S, ys + T},{-1.0, 0.0, 0.0}},
			{{0.0, 0.0, 1.0},{1.0, 1.0, 1.0, 1.0},{xs + T, ys + T},{-1.0, 0.0, 0.0}},
			{{0.0, 1.0, 1.0},{1.0, 1.0, 1.0, 1.0},{xs + T, ys + S},{-1.0, 0.0, 0.0}},
			{{0.0, 1.0, 0.0},{1.0, 1.0, 1.0, 1.0},{xs + S, ys + S},{-1.0, 0.0, 0.0}},
		};
		vtx[5] = new Vertex[4] {
			{{1.0, 0.0, 0.0},{1.0, 1.0, 1.0, 1.0},{xs + S, ys + T},{1.0, 0.0, 0.0}},
			{{1.0, 0.0, 1.0},{1.0, 1.0, 1.0, 1.0},{xs + T, ys + T},{1.0, 0.0, 0.0}},
			{{1.0, 1.0, 1.0},{1.0, 1.0, 1.0, 1.0},{xs + T, ys + S},{1.0, 0.0, 0.0}},
			{{1.0, 1.0, 0.0},{1.0, 1.0, 1.0, 1.0},{xs + S, ys + S},{1.0, 0.0, 0.0}},
		};
		itx[0] = new GLuint[6] {0,1,3,  1,2,3};
		itx[1] = new GLuint[6] {3,1,0,  3,2,1};
		itx[2] = new GLuint[6] {0,1,3,  1,2,3};
		itx[3] = new GLuint[6] {3,1,0,  3,2,1};
		itx[4] = new GLuint[6] {0,1,3,  1,2,3};
		itx[5] = new GLuint[6] {3,1,0,  3,2,1};
	}

	MultiFaceCubeTile::MultiFaceCubeTile(int t1, int t2, int t3, int t4, int t5, int t6) {
		int x = t1 % 16;
		int y = t1 / 16;
		const float T = 1.0f / 16.0f;
		const float S = 0.0f;
		float xs = x * T;
		float ys = y * T;
		vtx[0] = new Vertex[4] {
			{{0.0, 0.0, 0.0},{1.0, 1.0, 1.0, 1.0},{xs + S, ys + T},{0.0, 0.0, -1.0}},
			{{0.0, 1.0, 0.0},{1.0, 1.0, 1.0, 1.0},{xs + S, ys + S},{0.0, 0.0, -1.0}},
			{{1.0, 1.0, 0.0},{1.0, 1.0, 1.0, 1.0},{xs + T, ys + S},{0.0, 0.0, -1.0}},
			{{1.0, 0.0, 0.0},{1.0, 1.0, 1.0, 1.0},{xs + T, ys + T},{0.0, 0.0, -1.0}},
		};
		x = t2 % 16;
		y = t2 / 16;
		xs = x * T;
		ys = y * T;
		vtx[1] = new Vertex[4] {
			{{0.0, 0.0, 1.0},{1.0, 1.0, 1.0, 1.0},{xs + S, ys + T},{0.0, 0.0, 1.0}},
			{{0.0, 1.0, 1.0},{1.0, 1.0, 1.0, 1.0},{xs + S, ys + S},{0.0, 0.0, 1.0}},
			{{1.0, 1.0, 1.0},{1.0, 1.0, 1.0, 1.0},{xs + T, ys + S},{0.0, 0.0, 1.0}},
			{{1.0, 0.0, 1.0},{1.0, 1.0, 1.0, 1.0},{xs + T, ys + T},{0.0, 0.0, 1.0}},
		};
		x = t3 % 16;
		y = t3 / 16;
		xs = x * T;
		ys = y * T;
		vtx[2] = new Vertex[4] {
			{{0.0, 1.0, 0.0},{1.0, 1.0, 1.0, 1.0},{xs + S, ys + S},{0.0, 1.0, 0.0}},
			{{0.0, 1.0, 1.0},{1.0, 1.0, 1.0, 1.0},{xs + S, ys + T},{0.0, 1.0, 0.0}},
			{{1.0, 1.0, 1.0},{1.0, 1.0, 1.0, 1.0},{xs + T, ys + T},{0.0, 1.0, 0.0}},
			{{1.0, 1.0, 0.0},{1.0, 1.0, 1.0, 1.0},{xs + T, ys + S},{0.0, 1.0, 0.0}},
		};
		x = t4 % 16;
		y = t4 / 16;
		xs = x * T;
		ys = y * T;
		vtx[3] = new Vertex[4] {
			{{0.0, 0.0, 0.0},{1.0, 1.0, 1.0, 1.0},{xs + S, ys + T},{0.0, -1.0, 0.0}},
			{{0.0, 0.0, 1.0},{1.0, 1.0, 1.0, 1.0},{xs + T, ys + T},{0.0, -1.0, 0.0}},
			{{1.0, 0.0, 1.0},{1.0, 1.0, 1.0, 1.0},{xs + T, ys + S},{0.0, -1.0, 0.0}},
			{{1.0, 0.0, 0.0},{1.0, 1.0, 1.0, 1.0},{xs + S, ys + S},{0.0, -1.0, 0.0}},
		};
		x = t5 % 16;
		y = t5 / 16;
		xs = x * T;
		ys = y * T;
		vtx[4] = new Vertex[4] {
			{{0.0, 0.0, 0.0},{1.0, 1.0, 1.0, 1.0},{xs + S, ys + T},{-1.0, 0.0, 0.0}},
			{{0.0, 0.0, 1.0},{1.0, 1.0, 1.0, 1.0},{xs + T, ys + T},{-1.0, 0.0, 0.0}},
			{{0.0, 1.0, 1.0},{1.0, 1.0, 1.0, 1.0},{xs + T, ys + S},{-1.0, 0.0, 0.0}},
			{{0.0, 1.0, 0.0},{1.0, 1.0, 1.0, 1.0},{xs + S, ys + S},{-1.0, 0.0, 0.0}},
		};
		x = t6 % 16;
		y = t6 / 16;
		xs = x * T;
		ys = y * T;
		vtx[5] = new Vertex[4] {
			{{1.0, 0.0, 0.0},{1.0, 1.0, 1.0, 1.0},{xs + S, ys + T},{1.0, 0.0, 0.0}},
			{{1.0, 0.0, 1.0},{1.0, 1.0, 1.0, 1.0},{xs + T, ys + T},{1.0, 0.0, 0.0}},
			{{1.0, 1.0, 1.0},{1.0, 1.0, 1.0, 1.0},{xs + T, ys + S},{1.0, 0.0, 0.0}},
			{{1.0, 1.0, 0.0},{1.0, 1.0, 1.0, 1.0},{xs + S, ys + S},{1.0, 0.0, 0.0}},
		};

		itx[0] = new GLuint[6] {0,1,3,  1,2,3};
		itx[1] = new GLuint[6] {3,1,0,  3,2,1};
		itx[2] = new GLuint[6] {0,1,3,  1,2,3};
		itx[3] = new GLuint[6] {3,1,0,  3,2,1};
		itx[4] = new GLuint[6] {0,1,3,  1,2,3};
		itx[5] = new GLuint[6] {3,1,0,  3,2,1};
	}

	void Tiles::bake(
		float x, float y, float z,
		Vertex* v, GLuint* ix,
		int* vcount, int* icount, int ind
	) {
		for (int i = 0; i < 4; i++) {
			Vertex emitted = vtx[ind][i];
			emitted.world_position += glm::vec3(x, y, z);
			v[*vcount + i] = emitted;
		}

		for (int i = 0; i < 6; i++) {
			GLuint emitted = itx[ind][i];
			emitted += *vcount;
			ix[*icount + i] = emitted;
		}

		*vcount += 4;
		*icount += 6;
	}

	Tiles::~Tiles() {
		for (int i = 0; i < 6; i++) {
			XE(delete[], vtx[i]);
			XE(delete[], itx[i]);
		}
	}
}
