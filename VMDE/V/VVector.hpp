//=============================================================================
// ■ VVector.hpp
//-----------------------------------------------------------------------------
//   A naïve implementation of variable-sized array.
//=============================================================================

template <
	class T,
	size_t initial_capacity = 10,
	// Sometimes we'd like to reserve the memory but destruct this class.
	// In these case should cleanup be false.
	bool cleanup = true
> class VVector {
public:
	//-------------------------------------------------------------------------
	// ● 实例变量
	//-------------------------------------------------------------------------
	T* start;
	T* end;
	size_t capacity; // in numbers of objects
	//-------------------------------------------------------------------------
	// ● 构造
	//-------------------------------------------------------------------------
	VVector() {
		capacity = initial_capacity;
		start = end = malloc(capacity * sizeof(T));
	}
	//-------------------------------------------------------------------------
	// ● 析构
	//-------------------------------------------------------------------------
	~VVector() {
		if (cleanup) free(start);
	}
	//-------------------------------------------------------------------------
	// ● 获取元素个数
	//-------------------------------------------------------------------------
	size_t size() {
		return end - start;
	}
	//-------------------------------------------------------------------------
	// ● 在末尾追加元素
	//-------------------------------------------------------------------------
	void push(T x) {
		if (size() >= capacity) {
			size_t size = size();
			capacity += capacity >> 1;
			// 检查什么空指针？！
			// 如果连内存都搞不到，这个程序运行着还有什么意义？
			start = realloc(start, capacity);
			// end may be invalidated
			end = start + size;
		}
		*end++ = x;
	}
	//-------------------------------------------------------------------------
	// ● 获取末尾元素并丢弃之
	//-------------------------------------------------------------------------
	T pop() {
		assert(end > start);
		return *end--;
	}
};
