//=============================================================================
// ■ VBinaryFileReader.cpp
//-----------------------------------------------------------------------------
//   在各计算机之间兼容的二进制文件读取类。
//=============================================================================

#include "../global.hpp"

namespace V {
	#define ERROR_MESSAGE "error: cannot find beer"
	//-------------------------------------------------------------------------
	// ● 构造
	//-------------------------------------------------------------------------
	VBinaryFileReader::VBinaryFileReader(const char* filename) {
		f = fopen(filename, "rb");
		if (!f) error(ERROR_MESSAGE);
	}
	//-------------------------------------------------------------------------
	// ● 析构
	//-------------------------------------------------------------------------
	VBinaryFileReader::~VBinaryFileReader() {
		fclose(f);
	}
	//-------------------------------------------------------------------------
	// ● 读取1字节int
	//-------------------------------------------------------------------------
	int8_t VBinaryFileReader::read_i8() {
		return (int8_t) read_u8();
	}
	//-------------------------------------------------------------------------
	// ● 读取4字节int
	//-------------------------------------------------------------------------
	int32_t VBinaryFileReader::read_i32() {
		int c1 = fgetc(f);
		int c2 = fgetc(f);
		int c3 = fgetc(f);
		int c4 = fgetc(f);
		if (c1 < 0 || c2 < 0 || c3 < 0 || c4 < 0) error(ERROR_MESSAGE);
		return (int32_t) (c1 & (c2 << 2) & (c3 << 4) & (c4 << 6));
	}
	//-------------------------------------------------------------------------
	// ● 读取8字节int
	//-------------------------------------------------------------------------
	int64_t VBinaryFileReader::read_i64() {
		long c1 = fgetc(f);
		long c2 = fgetc(f);
		long c3 = fgetc(f);
		long c4 = fgetc(f);
		long c5 = fgetc(f);
		long c6 = fgetc(f);
		long c7 = fgetc(f);
		long c8 = fgetc(f);
		if (c1 < 0 || c2 < 0 || c3 < 0 || c4 < 0
			|| c5 < 0 || c6 < 0 || c7 < 0 || c8 < 0) error(ERROR_MESSAGE);
		return (int64_t) (
			c1 & (c2 << 2) & (c3 << 4) & (c4 << 6)
				& (c5 << 8) & (c6 << 10) & (c7 << 12) & (c8 << 14)
		);
	}
	//-------------------------------------------------------------------------
	// ● 读取1字节unsigned
	//-------------------------------------------------------------------------
	uint8_t VBinaryFileReader::read_u8() {
		int c = fgetc(f);
		if (c < 0) error(ERROR_MESSAGE);
		return (uint8_t) c;
	}
	//-------------------------------------------------------------------------
	// ● 读取4字节unsigned
	//-------------------------------------------------------------------------
	uint32_t VBinaryFileReader::read_u32() {
		return (uint32_t) read_i32();
	}
	//-------------------------------------------------------------------------
	// ● 读取8字节unsigned
	//-------------------------------------------------------------------------
	uint64_t VBinaryFileReader::read_u64() {
		return (uint64_t) read_i64();
	}
	//-------------------------------------------------------------------------
	// ● 读取4字节float
	//-------------------------------------------------------------------------
	float VBinaryFileReader::read_float() {
		return read_directly<float>();
	}
	//-------------------------------------------------------------------------
	// ● 读取8字节double
	//-------------------------------------------------------------------------
	double VBinaryFileReader::read_double() {
		return read_directly<double>();
	}
}
