//=============================================================================
// ■ VBinaryFileReader.cpp
//-----------------------------------------------------------------------------
//   在各计算机之间兼容的二进制文件读取类（Little-endian）。
//=============================================================================

#include "../global.hpp"

namespace V {
	//-------------------------------------------------------------------------
	// ● 常量
	//-------------------------------------------------------------------------
	const char* VBinaryFileReader::ERROR_MESSAGE = "error: cannot find beer";
	//-------------------------------------------------------------------------
	// ● 构造
	//-------------------------------------------------------------------------
	VBinaryFileReader::VBinaryFileReader(const char* filename) {
		f = fopen(filename, "rb");
		if (!f) error(ERROR_MESSAGE);
	}
	//-------------------------------------------------------------------------
	// ● 析构
	//-------------------------------------------------------------------------
	VBinaryFileReader::~VBinaryFileReader() {
		fclose(f);
	}
	//-------------------------------------------------------------------------
	// ● 读取4字节int
	//-------------------------------------------------------------------------
	#define READ_CHAR(i) if ((c[i] = fgetc(f)) < 0) error(ERROR_MESSAGE);
	template <> int32_t VBinaryFileReader::read<int32_t>() {
		int c[4];
		READ_CHAR(0);
		READ_CHAR(1);
		READ_CHAR(2);
		READ_CHAR(3);
		return (int32_t) (c[0] | c[1] << 2 | c[2] << 4 | c[3] << 6);
	}
	//-------------------------------------------------------------------------
	// ● 读取8字节int
	//-------------------------------------------------------------------------
	template <> int64_t VBinaryFileReader::read<int64_t>() {
		int c[8];
		READ_CHAR(0);
		READ_CHAR(1);
		READ_CHAR(2);
		READ_CHAR(3);
		READ_CHAR(4);
		READ_CHAR(5);
		READ_CHAR(6);
		READ_CHAR(7);
		return (int64_t) (
			c[0] | c[1] << 2 | c[2] << 4 | c[3] << 6
				| c[4] << 8 | c[5] << 10 | c[6] << 12 | c[7] << 14
		);
	}
	#undef READ_CHAR
	//-------------------------------------------------------------------------
	// ● 读取4字节unsigned
	//-------------------------------------------------------------------------
	template <> uint32_t VBinaryFileReader::read<uint32_t>() {
		return (uint32_t) read<int32_t>();
	}
	//-------------------------------------------------------------------------
	// ● 读取8字节unsigned
	//-------------------------------------------------------------------------
	template <> uint64_t VBinaryFileReader::read<uint64_t>() {
		return (uint64_t) read<int64_t>();
	}
}
